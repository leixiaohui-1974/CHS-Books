version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: learning_platform_db
    environment:
      POSTGRES_DB: learning_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: learning_platform_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # MongoDB (用于文档存储)
  mongo:
    image: mongo:7
    container_name: learning_platform_mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo123}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # 后端API服务（开发模式）
  backend_dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.optimized
      target: development
    container_name: learning_platform_backend_dev
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:${DB_PASSWORD:-postgres123}@db:5432/learning_platform
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      REDIS_URL: redis://redis:6379/0
      MONGO_URL: mongodb://admin:${MONGO_PASSWORD:-mongo123}@mongo:27017/
      ENVIRONMENT: development
    volumes:
      - ./backend/app:/app/app
      - ./backend/tests:/app/tests
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    profiles:
      - dev

  # 后端API服务（生产模式）
  backend_prod:
    build:
      context: ./backend
      dockerfile: Dockerfile.optimized
      target: production
    container_name: learning_platform_backend_prod
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:${DB_PASSWORD:-postgres123}@db:5432/learning_platform
      SECRET_KEY: ${SECRET_KEY}
      REDIS_URL: redis://redis:6379/0
      MONGO_URL: mongodb://admin:${MONGO_PASSWORD:-mongo123}@mongo:27017/
      ENVIRONMENT: production
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    profiles:
      - prod

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: learning_platform_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend_prod
    networks:
      - backend
    restart: unless-stopped
    profiles:
      - prod

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: learning_platform_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - backend
    profiles:
      - monitoring

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: learning_platform_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - backend
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  prometheus_data:
  grafana_data:

networks:
  backend:
    driver: bridge
