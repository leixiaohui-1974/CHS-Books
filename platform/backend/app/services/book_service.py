"""
‰π¶Á±çÊúçÂä° - ‰∏öÂä°ÈÄªËæëÂ±Ç
"""

from typing import List, Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, or_
from sqlalchemy.orm import selectinload

from app.models.book import Book, Chapter, Case, BookStatus
from loguru import logger


class BookService:
    """‰π¶Á±çÊúçÂä°Á±ª"""
    
    @staticmethod
    async def get_books(
        db: AsyncSession,
        page: int = 1,
        page_size: int = 20,
        status: Optional[str] = None,
        difficulty: Optional[str] = None,
        tag: Optional[str] = None,
        search: Optional[str] = None
    ) -> Tuple[List[Book], int]:
        """
        Ëé∑Âèñ‰π¶Á±çÂàóË°®ÔºàÂàÜÈ°µÔºâ
        
        Args:
            db: Êï∞ÊçÆÂ∫ì‰ºöËØù
            page: È°µÁ†Å
            page_size: ÊØèÈ°µÊï∞Èáè
            status: Áä∂ÊÄÅÁ≠õÈÄâ
            difficulty: ÈöæÂ∫¶Á≠õÈÄâ
            tag: Ê†áÁ≠æÁ≠õÈÄâ
            search: ÊêúÁ¥¢ÂÖ≥ÈîÆËØç
            
        Returns:
            (‰π¶Á±çÂàóË°®, ÊÄªÊï∞)
        """
        # ÊûÑÂª∫Êü•ËØ¢
        query = select(Book)
        
        # Á≠õÈÄâÊù°‰ª∂
        if status:
            query = query.where(Book.status == status)
        
        if difficulty:
            query = query.where(Book.difficulty == difficulty)
        
        if tag:
            # PostgreSQL JSONBÊï∞ÁªÑÂåÖÂê´Êü•ËØ¢
            query = query.where(Book.tags.contains([tag]))
        
        if search:
            # ÊêúÁ¥¢Ê†áÈ¢òÂíåÊèèËø∞
            query = query.where(
                or_(
                    Book.title.ilike(f"%{search}%"),
                    Book.description.ilike(f"%{search}%")
                )
            )
        
        # ËÆ°ÁÆóÊÄªÊï∞
        count_query = select(func.count()).select_from(query.subquery())
        total_result = await db.execute(count_query)
        total = total_result.scalar()
        
        # ÂàÜÈ°µ
        query = query.offset((page - 1) * page_size).limit(page_size)
        
        # ÊâßË°åÊü•ËØ¢
        result = await db.execute(query)
        books = result.scalars().all()
        
        logger.info(f"üìö Êü•ËØ¢‰π¶Á±ç: page={page}, total={total}")
        return list(books), total
    
    @staticmethod
    async def get_book_by_id(
        db: AsyncSession,
        book_id: int
    ) -> Optional[Book]:
        """ÈÄöËøáIDËé∑Âèñ‰π¶Á±ç"""
        result = await db.execute(
            select(Book).where(Book.id == book_id)
        )
        return result.scalar_one_or_none()
    
    @staticmethod
    async def get_book_by_slug(
        db: AsyncSession,
        slug: str
    ) -> Optional[Book]:
        """ÈÄöËøáslugËé∑Âèñ‰π¶Á±ç"""
        result = await db.execute(
            select(Book).where(Book.slug == slug)
        )
        return result.scalar_one_or_none()
    
    @staticmethod
    async def get_book_chapters(
        db: AsyncSession,
        book_id: int
    ) -> List[Chapter]:
        """
        Ëé∑Âèñ‰π¶Á±çÁöÑÊâÄÊúâÁ´†ËäÇÔºàÂê´Ê°à‰æãÔºâ
        
        Args:
            db: Êï∞ÊçÆÂ∫ì‰ºöËØù
            book_id: ‰π¶Á±çID
            
        Returns:
            Á´†ËäÇÂàóË°®ÔºàÊåâorderÊéíÂ∫èÔºâ
        """
        result = await db.execute(
            select(Chapter)
            .where(Chapter.book_id == book_id)
            .options(selectinload(Chapter.cases))
            .order_by(Chapter.order)
        )
        chapters = result.scalars().all()
        
        logger.info(f"üìë Êü•ËØ¢Á´†ËäÇ: book_id={book_id}, count={len(chapters)}")
        return list(chapters)
    
    @staticmethod
    async def get_case_by_id(
        db: AsyncSession,
        case_id: int
    ) -> Optional[Case]:
        """ÈÄöËøáIDËé∑ÂèñÊ°à‰æã"""
        result = await db.execute(
            select(Case).where(Case.id == case_id)
        )
        return result.scalar_one_or_none()
    
    @staticmethod
    async def create_book(
        db: AsyncSession,
        **kwargs
    ) -> Book:
        """
        ÂàõÂª∫‰π¶Á±ç
        
        Args:
            db: Êï∞ÊçÆÂ∫ì‰ºöËØù
            **kwargs: ‰π¶Á±çÂ≠óÊÆµ
            
        Returns:
            ÂàõÂª∫ÁöÑ‰π¶Á±çÂØπË±°
        """
        book = Book(**kwargs)
        db.add(book)
        await db.commit()
        await db.refresh(book)
        
        logger.info(f"‚úÖ ÂàõÂª∫‰π¶Á±ç: {book.title}")
        return book
    
    @staticmethod
    async def create_chapter(
        db: AsyncSession,
        **kwargs
    ) -> Chapter:
        """ÂàõÂª∫Á´†ËäÇ"""
        chapter = Chapter(**kwargs)
        db.add(chapter)
        await db.commit()
        await db.refresh(chapter)
        
        logger.info(f"‚úÖ ÂàõÂª∫Á´†ËäÇ: {chapter.title}")
        return chapter
    
    @staticmethod
    async def create_case(
        db: AsyncSession,
        **kwargs
    ) -> Case:
        """ÂàõÂª∫Ê°à‰æã"""
        case = Case(**kwargs)
        db.add(case)
        await db.commit()
        await db.refresh(case)
        
        logger.info(f"‚úÖ ÂàõÂª∫Ê°à‰æã: {case.title}")
        return case
    
    @staticmethod
    async def update_book(
        db: AsyncSession,
        book_id: int,
        **kwargs
    ) -> Optional[Book]:
        """Êõ¥Êñ∞‰π¶Á±ç‰ø°ÊÅØ"""
        book = await BookService.get_book_by_id(db, book_id)
        if not book:
            return None
        
        for key, value in kwargs.items():
            if hasattr(book, key):
                setattr(book, key, value)
        
        await db.commit()
        await db.refresh(book)
        
        logger.info(f"‚úÖ Êõ¥Êñ∞‰π¶Á±ç: {book.title}")
        return book
