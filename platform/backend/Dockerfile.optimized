# ================================
# 多阶段构建Dockerfile（优化版）
# ================================

# -------- 阶段1: 构建基础镜像 --------
FROM python:3.11-slim as base

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# 安装系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# 创建非root用户
RUN groupadd -r appuser && useradd -r -g appuser appuser

# 设置工作目录
WORKDIR /app


# -------- 阶段2: 依赖安装 --------
FROM base as dependencies

# 复制依赖文件
COPY requirements.txt .

# 安装Python依赖
RUN pip install --user --no-cache-dir -r requirements.txt


# -------- 阶段3: 开发环境 --------
FROM base as development

# 复制依赖
COPY --from=dependencies /root/.local /root/.local

# 复制应用代码
COPY --chown=appuser:appuser . .

# 确保Python能找到用户安装的包
ENV PATH=/root/.local/bin:$PATH

# 暴露端口
EXPOSE 8000

# 切换到非root用户
USER appuser

# 启动开发服务器（支持热重载）
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]


# -------- 阶段4: 生产环境 --------
FROM base as production

# 复制依赖
COPY --from=dependencies /root/.local /root/.local

# 复制应用代码
COPY --chown=appuser:appuser app ./app
COPY --chown=appuser:appuser scripts ./scripts
COPY --chown=appuser:appuser alembic ./alembic
COPY --chown=appuser:appuser alembic.ini .

# 确保Python能找到用户安装的包
ENV PATH=/root/.local/bin:$PATH

# 暴露端口
EXPOSE 8000

# 切换到非root用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/api/v1/health', timeout=5)"

# 启动生产服务器
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]


# -------- 阶段5: 测试环境 --------
FROM development as test

# 安装测试依赖（已在requirements.txt中）
RUN pip install --user pytest pytest-cov pytest-asyncio httpx

# 运行测试
CMD ["pytest", "tests/", "-v", "--cov=app", "--cov-report=html"]
